package com.grgbanking.ct.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.grgbanking.ct.entity.QRString;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "QRSTRING".
*/
public class QRStringDao extends AbstractDao<QRString, String> {

    public static final String TABLENAME = "QRSTRING";

    /**
     * Properties of entity QRString.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property QrCode = new Property(0, String.class, "qrCode", true, "QR_CODE");
    }


    public QRStringDao(DaoConfig config) {
        super(config);
    }
    
    public QRStringDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"QRSTRING\" (" + //
                "\"QR_CODE\" TEXT PRIMARY KEY NOT NULL UNIQUE );"); // 0: qrCode
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"QRSTRING\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, QRString entity) {
        stmt.clearBindings();
 
        String qrCode = entity.getQrCode();
        if (qrCode != null) {
            stmt.bindString(1, qrCode);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, QRString entity) {
        stmt.clearBindings();
 
        String qrCode = entity.getQrCode();
        if (qrCode != null) {
            stmt.bindString(1, qrCode);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public QRString readEntity(Cursor cursor, int offset) {
        QRString entity = new QRString( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0) // qrCode
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, QRString entity, int offset) {
        entity.setQrCode(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
     }
    
    @Override
    protected final String updateKeyAfterInsert(QRString entity, long rowId) {
        return entity.getQrCode();
    }
    
    @Override
    public String getKey(QRString entity) {
        if(entity != null) {
            return entity.getQrCode();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(QRString entity) {
        return entity.getQrCode() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
