package com.grgbanking.ct.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.grgbanking.ct.entity.BankPX;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BANK_PX".
*/
public class BankPXDao extends AbstractDao<BankPX, Void> {

    public static final String TABLENAME = "BANK_PX";

    /**
     * Properties of entity BankPX.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property BankName = new Property(0, String.class, "bankName", false, "BANK_NAME");
        public final static Property BankId = new Property(1, String.class, "bankId", false, "BANK_ID");
        public final static Property HundredDeno = new Property(2, int.class, "hundredDeno", false, "HUNDRED_DENO");
        public final static Property FiftyDeno = new Property(3, int.class, "fiftyDeno", false, "FIFTY_DENO");
        public final static Property TwentyDeno = new Property(4, int.class, "twentyDeno", false, "TWENTY_DENO");
        public final static Property TenDeno = new Property(5, int.class, "tenDeno", false, "TEN_DENO");
        public final static Property FiveDeno = new Property(6, int.class, "fiveDeno", false, "FIVE_DENO");
        public final static Property OneDeno = new Property(7, int.class, "oneDeno", false, "ONE_DENO");
        public final static Property TotalSum = new Property(8, String.class, "totalSum", false, "TOTAL_SUM");
        public final static Property OtherInfo = new Property(9, String.class, "otherInfo", false, "OTHER_INFO");
    }


    public BankPXDao(DaoConfig config) {
        super(config);
    }
    
    public BankPXDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BANK_PX\" (" + //
                "\"BANK_NAME\" TEXT," + // 0: bankName
                "\"BANK_ID\" TEXT," + // 1: bankId
                "\"HUNDRED_DENO\" INTEGER NOT NULL ," + // 2: hundredDeno
                "\"FIFTY_DENO\" INTEGER NOT NULL ," + // 3: fiftyDeno
                "\"TWENTY_DENO\" INTEGER NOT NULL ," + // 4: twentyDeno
                "\"TEN_DENO\" INTEGER NOT NULL ," + // 5: tenDeno
                "\"FIVE_DENO\" INTEGER NOT NULL ," + // 6: fiveDeno
                "\"ONE_DENO\" INTEGER NOT NULL ," + // 7: oneDeno
                "\"TOTAL_SUM\" TEXT," + // 8: totalSum
                "\"OTHER_INFO\" TEXT);"); // 9: otherInfo
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BANK_PX\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BankPX entity) {
        stmt.clearBindings();
 
        String bankName = entity.getBankName();
        if (bankName != null) {
            stmt.bindString(1, bankName);
        }
 
        String bankId = entity.getBankId();
        if (bankId != null) {
            stmt.bindString(2, bankId);
        }
        stmt.bindLong(3, entity.getHundredDeno());
        stmt.bindLong(4, entity.getFiftyDeno());
        stmt.bindLong(5, entity.getTwentyDeno());
        stmt.bindLong(6, entity.getTenDeno());
        stmt.bindLong(7, entity.getFiveDeno());
        stmt.bindLong(8, entity.getOneDeno());
 
        String totalSum = entity.getTotalSum();
        if (totalSum != null) {
            stmt.bindString(9, totalSum);
        }
 
        String otherInfo = entity.getOtherInfo();
        if (otherInfo != null) {
            stmt.bindString(10, otherInfo);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BankPX entity) {
        stmt.clearBindings();
 
        String bankName = entity.getBankName();
        if (bankName != null) {
            stmt.bindString(1, bankName);
        }
 
        String bankId = entity.getBankId();
        if (bankId != null) {
            stmt.bindString(2, bankId);
        }
        stmt.bindLong(3, entity.getHundredDeno());
        stmt.bindLong(4, entity.getFiftyDeno());
        stmt.bindLong(5, entity.getTwentyDeno());
        stmt.bindLong(6, entity.getTenDeno());
        stmt.bindLong(7, entity.getFiveDeno());
        stmt.bindLong(8, entity.getOneDeno());
 
        String totalSum = entity.getTotalSum();
        if (totalSum != null) {
            stmt.bindString(9, totalSum);
        }
 
        String otherInfo = entity.getOtherInfo();
        if (otherInfo != null) {
            stmt.bindString(10, otherInfo);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public BankPX readEntity(Cursor cursor, int offset) {
        BankPX entity = new BankPX( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // bankName
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // bankId
            cursor.getInt(offset + 2), // hundredDeno
            cursor.getInt(offset + 3), // fiftyDeno
            cursor.getInt(offset + 4), // twentyDeno
            cursor.getInt(offset + 5), // tenDeno
            cursor.getInt(offset + 6), // fiveDeno
            cursor.getInt(offset + 7), // oneDeno
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // totalSum
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // otherInfo
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BankPX entity, int offset) {
        entity.setBankName(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setBankId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setHundredDeno(cursor.getInt(offset + 2));
        entity.setFiftyDeno(cursor.getInt(offset + 3));
        entity.setTwentyDeno(cursor.getInt(offset + 4));
        entity.setTenDeno(cursor.getInt(offset + 5));
        entity.setFiveDeno(cursor.getInt(offset + 6));
        entity.setOneDeno(cursor.getInt(offset + 7));
        entity.setTotalSum(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setOtherInfo(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(BankPX entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(BankPX entity) {
        return null;
    }

    @Override
    public boolean hasKey(BankPX entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
